name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: "Test ${{ matrix.name-prefix }}"
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name-prefix: "Python 3.6 without MPI"
            enable-mpi: false
            configure-options: "--without-mpi"
            python-version: "3.6"
            MPICONF: "--without-mpi"
            MKCHECKFLAGS: "-j 2"
            CPPFLAGS: "${HDF5_SERIAL_CPPFLAGS} ${CPPFLAGS}"
            LDFLAGS: "${HDF5_SERIAL_LDFLAGS} ${LDFLAGS}"
          - name-prefix: "Python 3.9 without MPI"
            enable-mpi: false
            configure-options: "--without-mpi"
            python-version: "3.9"
            MPICONF: "--without-mpi"
            MKCHECKFLAGS: "-j 2"
            CPPFLAGS: "${HDF5_SERIAL_CPPFLAGS} ${CPPFLAGS}"
            LDFLAGS: "${HDF5_SERIAL_LDFLAGS} ${LDFLAGS}"
          - name-prefix: "Python 3.6 with MPI"
            enable-mpi: true
            configure-options: "--with-mpi"
            python-version: "3.6"
            MPICONF: "--with-mpi"
            MKCHECKFLAGS: ""
            HDF5_MPI: "ON"
            CC: mpicc
            CXX: mpic++
            CPPFLAGS: "${HDF5_PARALLEL_CPPFLAGS} ${CPPFLAGS}"
            LDFLAGS: "${HDF5_PARALLEL_LDFLAGS} ${LDFLAGS}"
          - name-prefix: "Python 3.9 with MPI"
            enable-mpi: true
            configure-options: "--with-mpi"
            python-version: "3.9"
            MPICONF: "--with-mpi"
            MKCHECKFLAGS: ""
            HDF5_MPI: "ON"
            CC: mpicc
            CXX: mpic++
            CPPFLAGS: "${HDF5_PARALLEL_CPPFLAGS} ${CPPFLAGS}"
            LDFLAGS: "${HDF5_PARALLEL_LDFLAGS} ${LDFLAGS}"

    env:
      CPPFLAGS: "-I${HOME}/local/include"
      LDFLAGS: "-L${HOME}/local/lib"
      HDF5_BASE_CPPFLAGS: "-I/usr/include/hdf5"
      HDF5_SERIAL_CPPFLAGS: "${HDF5_BASE_CPPFLAGS}/serial"
      HDF5_PARALLEL_CPPFLAGS: "${HDF5_BASE_CPPFLAGS}/openmpi"
      HDF5_BASE_LDFLAGS: "-L/usr/lib/x86_64-linux-gnu/hdf5"
      HDF5_SERIAL_LDFLAGS: "${HDF5_BASE_LDFLAGS}/serial"
      HDF5_PARALLEL_LDFLAGS: "${HDF5_BASE_LDFLAGS}/openmpi"
      GEN_CTL_IO: "${HOME}/local/bin/gen-ctl-io"

    steps:
    - name: Install common dependencies
      run: |
        sudo apt-get -y update
        sudo apt-get -y install autoconf automake libfftw3-dev libgsl-dev liblapack-dev guile-3.0-dev libpng-dev libtool swig
        git clone https://github.com/NanoComp/libctl.git libctl-src
        (cd libctl-src && git checkout master && sh autogen.sh --prefix=$HOME/local --enable-shared && make -j 2 && make install)
        git clone https://github.com/NanoComp/harminv.git
        (cd harminv && git checkout master && sh autogen.sh --prefix=$HOME/local --enable-shared && make -j 2 && make install)
        git clone https://github.com/NanoComp/mpb.git
        (cd mpb && git checkout master && sh autogen.sh --prefix=$HOME/local --enable-shared LIBS=-ldl --with-libctl=${HOME}/local/share/libctl --with-hermitian-eps && make -j 2 && make install)
        git clone https://github.com/HomerReid/libGDSII.git
        (cd libGDSII && git checkout master && sh autogen.sh --prefix=$HOME/local && make install)

    - name: Install serial dependencies
      if: ${{ matrix.enable-mpi == false }}
      run: sudo apt-get -y install libhdf5-serial-dev

    - name: Install MPI dependencies
      if: matrix.enable-mpi
      run: sudo apt-get -y install libopenmpi-dev mpi-default-bin openmpi-bin libhdf5-openmpi-dev

    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up Python (version ${{ matrix.python-version }})
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: pip install autograd h5py jax jaxlib matplotlib mpi4py numpy parameterized pytest scipy

    - name: configure
      run: |
        autoreconf --verbose --install --symlink --force
        mkdir -p build && pushd build
        ../configure --enable-maintainer-mode --prefix=$HOME/local --with-libctl=$HOME/local/share/libctl ${MPICONF}

    - name: make
      run: make ${MKCHECKFLAGS} distcheck DISTCHECK_CONFIGURE_FLAGS="--with-libctl=${HOME}/local/share/libctl ${MPICONF}"

    - name: Run C++ tests
      run: pushd tests && make ${MKCHECKFLAGS} check && popd

    - name: Run Python tests
      env:
        MEEP_SKIP_LARGE_TESTS: 1
      run: |
        export PYTHONPATH="${PWD}/python:${PYTHONPATH}"
        pytest python/tests
