name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: "Test ${{ matrix.name-prefix }}"
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name-prefix: "Python 3.6 without MPI"
            enable-mpi: false
            configure-options: "--without-mpi"
            python-version: "3.6"
          - name-prefix: "Python 3.9 without MPI"
            enable-mpi: false
            configure-options: "--without-mpi"
            python-version: "3.9"
          - name-prefix: "Python 3.6 with MPI"
            enable-mpi: true
            configure-options: "--with-mpi"
            python-version: "3.6"
          - name-prefix: "Python 3.9 with MPI"
            enable-mpi: true
            configure-options: "--with-mpi"
            python-version: "3.9"

    steps:
    - name: Define common environment variables
      run: |
        echo "CPPFLAGS=-I${HOME}/local/include" >> $GITHUB_ENV
        echo "LDFLAGS=-L${HOME}/local/lib" >> $GITHUB_ENV
        echo "HDF5_BASE_CPPFLAGS=-I/usr/include/hdf5" >> $GITHUB_ENV
        echo "HDF5_BASE_LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5" >> $GITHUB_ENV
        echo "GEN_CTL_IO=${HOME}/local/bin/gen-ctl-io" >> $GITHUB_ENV

    - name: Define more common environment variables
      run: |
        echo "HDF5_SERIAL_CPPFLAGS=${HDF5_BASE_CPPFLAGS}/serial" >> $GITHUB_ENV
        echo "HDF5_PARALLEL_CPPFLAGS=${HDF5_BASE_CPPFLAGS}/openmpi" >> $GITHUB_ENV
        echo "HDF5_SERIAL_LDFLAGS=${HDF5_BASE_LDFLAGS}/serial" >> $GITHUB_ENV
        echo "HDF5_PARALLEL_LDFLAGS=${HDF5_BASE_LDFLAGS}/openmpi" >> $GITHUB_ENV

    - name: Install common dependencies
      run: |
        sudo apt-get -y update
        sudo apt-get -y install autoconf automake libfftw3-dev libgsl-dev liblapack-dev guile-3.0-dev libpng-dev libtool swig
        git clone https://github.com/NanoComp/libctl.git libctl-src
        (cd libctl-src && git checkout master && sh autogen.sh --prefix=${HOME}/local --enable-shared && make -j 2 && make install)
        git clone https://github.com/NanoComp/harminv.git
        (cd harminv && git checkout master && sh autogen.sh --prefix=${HOME}/local --enable-shared && make -j 2 && make install)
        git clone https://github.com/NanoComp/mpb.git
        (cd mpb && git checkout master && sh autogen.sh --prefix=${HOME}/local --enable-shared LIBS=-ldl --with-libctl=${HOME}/local/share/libctl --with-hermitian-eps && make -j 2 && make install)
        git clone https://github.com/HomerReid/libGDSII.git
        (cd libGDSII && git checkout master && sh autogen.sh --prefix=${HOME}/local && make install)

    - name: Define environment variables for serial build
      if: ${{ matrix.enable-mpi == false }}
      run: |
        echo "MKCHECKFLAGS=-j 2" >> $GITHUB_ENV
        echo "CPPFLAGS=${HDF5_SERIAL_CPPFLAGS} ${CPPFLAGS}" >> $GITHUB_ENV
        echo "LDFLAGS=${HDF5_SERIAL_LDFLAGS} ${LDFLAGS}" >> $GITHUB_ENV

    - name: Define environment variables for MPI build
      if: matrix.enable-mpi
      run: |
        echo "MKCHECKFLAGS=" >> $GITHUB_ENV
        echo "CPPFLAGS=${HDF5_PARALLEL_CPPFLAGS} ${CPPFLAGS}" >> $GITHUB_ENV
        echo "LDFLAGS=${HDF5_PARALLEL_LDFLAGS} ${LDFLAGS}" >> $GITHUB_ENV
        echo "CC=mpicc" >> $GITHUB_ENV
        echo "CXX=mpic++" >> $GITHUB_ENV
        echo "HDF5_MPI=ON" >> $GITHUB_ENV

    - name: Install serial dependencies
      if: ${{ matrix.enable-mpi == false }}
      run: sudo apt-get -y install libhdf5-serial-dev

    - name: Install MPI dependencies
      if: matrix.enable-mpi
      run: sudo apt-get -y install libopenmpi-dev mpi-default-bin openmpi-bin libhdf5-openmpi-dev libaec-dev

    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up Python (version ${{ matrix.python-version }})
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: pip install autograd h5py jax jaxlib matplotlib numpy parameterized pytest scipy

    - name: Install mpi4py
      if: matrix.enable-mpi
      run: pip install mpi4py

    - name: Run autoreconf
      run: |
        autoreconf --verbose --install --symlink --force
        MEEP_VERSION=$(./configure -V | grep meep | awk '{print $3}')
        echo "MEEP_VERSION=${MEEP_VERSION}" >> $GITHUB_ENV

    - name: Run configure
      run: |
        mkdir -p build && pushd build
        ../configure --enable-maintainer-mode --prefix=${HOME}/local --with-libctl=${HOME}/local/share/libctl ${{ matrix.configure-options }}

    - name: Run make distcheck
      run: pushd build && make ${MKCHECKFLAGS} distcheck DISTCHECK_CONFIGURE_FLAGS="--with-libctl=${HOME}/local/share/libctl ${{ matrix.configure-options }}"