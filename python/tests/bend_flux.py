from __future__ import division

import unittest
import numpy as np
import meep as mp


class TestBendFlux(unittest.TestCase):

    def init(self, no_bend=False):
        sx = 16
        sy = 32
        cell = mp.Vector3(sx, sy, 0)
        pad = 4
        w = 1
        wvg_ycen = -0.5 * (sy - w - (2 * pad))
        wvg_xcen = 0.5 * (sx - w - (2 * pad))

        if no_bend:
            geometry = [mp.Block(mp.Vector3(mp.inf, w, mp.inf), center=mp.Vector3(0, wvg_ycen),
                                 material=mp.Medium(epsilon=12))]
        else:
            geometry = [mp.Block(mp.Vector3(sx - pad, w, mp.inf), center=mp.Vector3(-0.5 * pad, wvg_ycen),
                                 material=mp.Medium(epsilon=12)),
                        mp.Block(mp.Vector3(w, sy - pad, mp.inf), center=mp.Vector3(wvg_xcen, 0.5 * pad),
                                 material=mp.Medium(epsilon=12))]

        fcen = 0.15
        df = 0.1
        sources = [mp.Source(mp.GaussianSource(fcen, fwidth=df), component=mp.Ez,
                             center=mp.Vector3(1 + (-0.5 * sx), wvg_ycen), size=mp.Vector3(0, w))]

        pml_layers = [mp.PML(1.0)]
        resolution = 10
        nfreq = 100

        self.sim = mp.Simulation(cell_size=cell,
                                 boundary_layers=pml_layers,
                                 geometry=geometry,
                                 sources=sources,
                                 resolution=resolution)

        if no_bend:
            fr = mp.FluxRegion(center=mp.Vector3((sx / 2) - 1.5, wvg_ycen), size=mp.Vector3(0, w * 2))
        else:
            fr = mp.FluxRegion(center=mp.Vector3(wvg_xcen, (sy / 2) - 1.5), size=mp.Vector3(w * 2, 0))

        self.trans = self.sim.add_flux(fcen, df, nfreq, fr)
        refl_fr = mp.FluxRegion(center=mp.Vector3((-0.5 * sx) + 1.5, wvg_ycen),
                                size=mp.Vector3(0, w * 2))

        self.refl = self.sim.add_flux(fcen, df, nfreq, refl_fr)

        if no_bend:
            self.pt = mp.Vector3((sx / 2) - 1.5, wvg_ycen)
        else:
            self.pt = mp.Vector3(wvg_xcen, (sy / 2) - 1.5)

    def run_with_straight_waveguide(self):
        self.init(no_bend=True)
        self.sim.run(until_after_sources=mp.stop_when_fields_decayed(50, mp.Ez, self.pt, 1e-3))
        self.sim.save_flux('refl-flux', self.refl)

        expected = [
            (0.09999999999999999, 3.652315632510848e-5 - 3.774865344134843e-8j,
             3.689324950772983e-5 - 2.3319009140861134e-6j),
            (0.10101010101010101, 5.556067188759004e-5 - 4.1866845196626986e-8j,
             5.6065539588045814e-5 - 3.4609171943681757e-6j),
            (0.10202020202020202, 8.382116974778425e-5 - 3.8230104542413495e-8j,
             8.449098647360322e-5 - 5.092248947174303e-6j),
            (0.10303030303030304, 1.2541116222919424e-4 - 1.941411099798801e-8j,
             1.2626863904464898e-4 - 7.420879083723096e-6j),
            (0.10404040404040406, 1.8608911753125064e-4 + 2.553281762138273e-8j,
             1.871353033983132e-4 - 1.0705214815855586e-5j),
            (0.10505050505050507, 2.738488678686204e-4 + 1.1168447427360973e-7j,
             2.7503913466712704e-4 - 1.5288914434821213e-5j),
            (0.10606060606060609, 3.9967403774481046e-4 + 2.5837990513743e-7j,
             4.008802694229101e-4 - 2.163421078301058e-5j),
            (0.10707070707070711, 5.784995359302202e-4 + 4.885319896822967e-7j,
             5.794540878809877e-4 - 3.0369394655750835e-5j),
            (0.10808080808080812, 8.304184329859758e-4 + 8.266321597308283e-7j,
             8.306354068807912e-4 - 4.234835331404631e-5j),
            (0.10909090909090914, 0.0011821728266052064 + 1.2949473328620418e-6j,
             0.0011808427134672918 - 5.871236071729396e-5j),
            (0.11010101010101016, 0.0016689646834843488 + 1.9074660601865036e-6j,
             0.0016648194418920086 - 8.093692490978198e-5j),
            (0.11111111111111117, 0.0023366161386439415 + 2.661356189635847e-6j,
             0.0023277631832087065 - 1.1084565548375203e-4j),
            (0.11212121212121219, 0.0032440972909618107 + 3.526090460136918e-6j,
             0.0032278225791652127 - 1.5058579316683897e-4j),
            (0.11313131313131321, 0.004466422173851652 + 4.4310053010708535e-6j,
             0.004438964688221513 - 2.0258885174385754e-4j),
            (0.11414141414141422, 0.006097889501895004 + 5.25287129559547e-6j,
             0.006054192282502595 - 2.695767598777261e-4j),
            (0.11515151515151524, 0.008255613523984517 + 5.806005713575812e-6j,
             0.008189060472740007 - 3.5469717822899055e-4j),
            (0.11616161616161626, 0.01108325184948824 + 5.838412623458069e-6j,
             0.010985404882968713 - 4.618510128842973e-4j),
            (0.11717171717171727, 0.01475479205524901 + 5.038184101279347e-6j,
             0.014615148823564312 - 5.961883666807332e-4j),
            (0.11818181818181829, 0.019478208527178128 + 3.05466469631682e-6j,
             0.01928400422414223 - 7.64606126462786e-4j),
            (0.11919191919191931, 0.02549874740790247 - 4.616285924075623e-7j,
             0.02523482115915779 - 9.759409194590368e-4j),
        ]

        res = list(zip(mp.get_flux_freqs(self.trans), mp.get_fluxes(self.trans), mp.get_fluxes(self.refl)))

        np.testing.assert_allclose(expected, res[:20])

    def test_ninety_degree_bend(self):
        # We have to run the straight waveguide version first to generate the 'refl-flux'
        # file that this test uses. We can't just prepend run_with_straight_waveguide
        # with 'test_' because execution order of unit tests isn't deterministic.
        self.run_with_straight_waveguide()
        self.sim = None
        self.init()
        self.sim.load_minus_flux('refl-flux', self.refl)
        self.sim.run(until_after_sources=mp.stop_when_fields_decayed(50, mp.Ez, self.pt, 1e-3))

        expected = [
            (0.09999999999999999, 1.8392235204829767e-5 - 5.4285095065063746e-9j,
             -7.259467687598002e-6 - 5.838597683534011e-10j),
            (0.10101010101010101, 2.7629932558236724e-5 - 7.036398508408037e-8j,
             -1.1107162110079347e-5 + 4.231580505126295e-10j),
            (0.10202020202020202, 4.1001228946782745e-5 - 1.6342105084271953e-7j,
             -1.687561915798036e-5 + 3.5058562259916698e-9j),
            (0.10303030303030304, 6.018966076122556e-5 - 2.420194511459799e-7j,
             -2.5425779493709066e-5 + 1.0413258951663478e-8j),
            (0.10404040404040406, 8.758554071933231e-5 - 2.2473917214800408e-7j,
             -3.794958119189475e-5 + 2.128347267030453e-8j),
            (0.10505050505050507, 1.2656696778129198e-4 - 1.3692898415519696e-8j,
             -5.612512808928115e-5 + 3.521156332533183e-8j),
            (0.10606060606060609, 1.817948859871414e-4 + 4.461766106920513e-7j,
             -8.232188174309142e-5 + 5.366569472892163e-8j),
            (0.10707070707070711, 2.594514094902856e-4 + 1.081462031213428e-6j,
             -1.1981531280672989e-4 + 8.389584118674671e-8j),
            (0.10808080808080812, 3.6736164837695035e-4 + 1.6207580830808354e-6j,
             -1.7300125173897737e-4 + 1.3858502048186335e-7j),
            (0.10909090909090914, 5.150131339048232e-4 + 1.610622447150084e-6j,
             -2.476730940385436e-4 + 2.3206611050043933e-7j),
            (0.11010101010101016, 7.136181099374187e-4 + 5.813100578092315e-7j,
             -3.5145561406042276e-4 + 3.7849554926148485e-7j),
            (0.11111111111111117, 9.76491765781944e-4 - 1.6349137299378878e-6j,
             -4.944142331545938e-4 + 5.964918451476945e-7j),
            (0.11212121212121219, 0.001320033637882244 - 4.545538879315355e-6j,
             -6.897357105189368e-4 + 9.165307211312806e-7j),
            (0.11313131313131321, 0.0017653940714397098 - 6.832427277379379e-6j,
             -9.543556354451615e-4 + 1.3799283778607505e-6j),
            (0.11414141414141422, 0.0023404727796352857 - 6.644734821221773e-6j,
             -0.0013095604571818236 + 2.0229470864596793e-6j),
            (0.11515151515151524, 0.0030813962415392098 - 2.469643025118388e-6j,
             -0.00178176942635486 + 2.853329382035927e-6j),
            (0.11616161616161626, 0.00403238648982478 + 5.639979027210966e-6j,
             -0.0024036650652026112 + 3.8356454651560025e-6j),
            (0.11717171717171727, 0.005243320443599316 + 1.5111513697341668e-5j,
             -0.003215529845495731 + 4.890354966720182e-6j),
            (0.11818181818181829, 0.0067654019326068 + 2.1018051894683857e-5j,
             -0.004266367104375331 + 5.891649745095704e-6j),
            (0.11919191919191931, 0.008646855439680507 + 1.794288518397233e-5j,
             -0.005614491919262783 + 6.645833568494422e-6j),
        ]

        res = list(zip(mp.get_flux_freqs(self.trans), mp.get_fluxes(self.trans), mp.get_fluxes(self.refl)))

        np.testing.assert_allclose(expected, res[:20])


if __name__ == '__main__':
    unittest.main()
