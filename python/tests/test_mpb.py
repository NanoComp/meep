from __future__ import division

import unittest
# import numpy as np
import meep as mp
from meep import mpb


class TestMPBWrappers(unittest.TestCase):

    def setUp(self):
        self.num_bands = 8
        self.k_points = [mp.Vector3(),
                         mp.Vector3(0.5),
                         mp.Vector3(0.5, 0.5),
                         mp.Vector3()]

        self.k_points = mp.interpolate(4, self.k_points)
        self.geometry = []  # [mp.Cylinder(0.2, material=mp.Medium(epsilon=12))]
        self.geometry_lattice = mp.Lattice(size=mp.Vector3(1, 1))
        self.resolution = 32

    def test_mode_solver_constructor(self):
        mpb.mode_solver(self.num_bands, 0, self.resolution, self.geometry_lattice,
                        1.0e-7, mp.Medium(), self.geometry, True, True)


class TestModeSolver(unittest.TestCase):

    # def test_list_split(self):
    #     k_points = [
    #         mp.Vector3(),
    #         mp.Vector3(0.5),
    #         mp.Vector3(0.5, 0.5),
    #         mp.Vector3()
    #     ]

    #     k_points = mp.interpolate(4, k_points)

    #     k_split = mp.list_split(k_points, 1, 0)

    #     expected = [
    #         (0, [mp.Vector3(),
    #              mp.Vector3(0.10000000000000003),
    #              mp.Vector3(0.20000000000000004),
    #              mp.Vector3(0.30000000000000004),
    #              mp.Vector3(0.4),
    #              mp.Vector3(0.5),
    #              mp.Vector3(0.5, 0.10000000000000003),
    #              mp.Vector3(0.5, 0.20000000000000004),
    #              mp.Vector3(0.5, 0.30000000000000004),
    #              mp.Vector3(0.5, 0.4),
    #              mp.Vector3(0.5, 0.5),
    #              mp.Vector3(0.4, 0.4),
    #              mp.Vector3(0.30000000000000004, 0.30000000000000004),
    #              mp.Vector3(0.2, 0.2),
    #              mp.Vector3(0.1, 0.1),
    #              mp.Vector3(0.0, 0.0)]),
    #     ]

    #     indx = k_split[0][0]
    #     split_list = k_split[0][1]
    #     self.assertEqual(indx, 0)
    #     for res, exp in zip(split_list, expected[0][1]):
    #         self.assertEqual(res, exp)

    # def test_update_band_range_data(self):
    #     brd = []
    #     freqs = [0.0, 1.0000000001231053, 1.0000000001577114, 1.000000000183077,
    #              1.0000000003647922, 1.4142135627385737, 1.4142135630373556,
    #              1.4142135634172286]
    #     kpoint = mp.Vector3()

    #     expected = [
    #         ((0.0, mp.Vector3()), (0.0, mp.Vector3())),
    #         ((1.0000000001231053, mp.Vector3()), (1.0000000001231053, mp.Vector3())),
    #         ((1.0000000001577114, mp.Vector3()), (1.0000000001577114, mp.Vector3())),
    #         ((1.000000000183077, mp.Vector3()), (1.000000000183077, mp.Vector3())),
    #         ((1.0000000003647922, mp.Vector3()), (1.0000000003647922, mp.Vector3())),
    #         ((1.4142135627385737, mp.Vector3()), (1.4142135627385737, mp.Vector3())),
    #         ((1.4142135630373556, mp.Vector3()), (1.4142135630373556, mp.Vector3())),
    #         ((1.4142135634172286, mp.Vector3()), (1.4142135634172286, mp.Vector3())),
    #     ]

    #     ms = mpb.ModeSolver()
    #     res = ms.update_band_range_data(brd, freqs, kpoint)
    #     self.assertEqual(expected, res)

    def test_no_geometry(self):
        num_bands = 8
        k_points = [
            mp.Vector3(),
            mp.Vector3(0.5),
            mp.Vector3(0.5, 0.5),
            mp.Vector3()
        ]

        k_points = mp.interpolate(4, k_points)
        geometry_lattice = mp.Lattice(size=mp.Vector3(1, 1))
        resolution = 32

        ms = mpb.ModeSolver(
            num_bands=num_bands,
            k_points=k_points,
            geometry=[],
            geometry_lattice=geometry_lattice,
            resolution=resolution,
            deterministic=True
        )

        ms.run_te()

        expected_freqs = [
            (0.0,
             1.0000000000464613,
             1.0000000000543054,
             1.0000000000615705,
             1.000000000146055,
             1.4142135624581003,
             1.4142135625089993,
             1.4142135625528056),
            (0.1,
             0.9000000001550924,
             1.0049875621904198,
             1.0049875622885223,
             1.1000000000933774,
             1.3453624048874995,
             1.3453624052436801,
             1.4866068751122161),
            (0.2,
             0.8000000000116375,
             1.0198039027271282,
             1.019803902730517,
             1.200000000010754,
             1.2806248474929454,
             1.2806248475163993,
             1.5620499352326278),
            (0.30000000000000004,
             0.7000000000011868,
             1.0440306508918364,
             1.0440306508920387,
             1.2206555615737378,
             1.2206555615763066,
             1.3000000000014578,
             1.6401219466969021),
            (0.4000000000000003,
             0.6000000000004628,
             1.0770329614271468,
             1.0770329614271774,
             1.1661903789691512,
             1.166190378969408,
             1.4000000000003532,
             1.7204650534095256),
            (0.5,
             0.5000000000350678,
             1.1180339887555244,
             1.1180339887627508,
             1.1180339887649489,
             1.1180339887687103,
             1.5000000000111153,
             1.8027756376524453),
            (0.509901951359278,
             0.5099019514458716,
             1.0295630141348482,
             1.0295630142004515,
             1.2083045973874058,
             1.2083045974222109,
             1.5033296378612853,
             1.7492855555308888),
            (0.5385164807134508,
             0.5667749251868665,
             0.9569710818749532,
             0.9598001998613896,
             1.3060978520614315,
             1.3097390466091283,
             1.5200437573891414,
             1.5961061937551981),
            (0.58309518948453,
             0.5830951911457611,
             0.8602325273332244,
             0.8602325277393493,
             1.3928388281223145,
             1.3928388365843103,
             1.5297058564565378,
             1.5297058995212813),
            (0.6403124237432845,
             0.6403124247682638,
             0.781024968061956,
             0.7810249682383915,
             1.4866068748830337,
             1.486606876659867,
             1.5524174699814146,
             1.5524174856540145),
            (0.7071067811865476,
             0.7071067811880555,
             0.7071067811884221,
             0.7071067811901163,
             1.5811388300846416,
             1.5811388300858549,
             1.5811388300892486,
             1.581138830114666),
            (0.5656854249492381,
             0.7211102567829735,
             0.7211102586521964,
             0.8485281398532061,
             1.4560219792287434,
             1.4560219922982203,
             1.5231546215078169,
             1.5231546281251418),
            (0.4242640687119286,
             0.761577311243524,
             0.7615773118865434,
             0.9899494940070525,
             1.3341664068961834,
             1.3341664087834073,
             1.47648230615162,
             1.4764823071570101),
            (0.282842712474619,
             0.8246211251927931,
             0.8246211252532635,
             1.1313708499266775,
             1.2165525061076403,
             1.216552506264088,
             1.442220510231749,
             1.4422205103997088),
            (0.14142135623730961,
             0.9055385138206714,
             0.9055385138262214,
             1.1045361017236859,
             1.1045361017248032,
             1.2727922061382657,
             1.4212670403652352,
             1.4212670403803151),
            (0.0,
             1.0000000000003246,
             1.0000000000004943,
             1.0000000000005942,
             1.000000000001028,
             1.4142135623732919,
             1.414213562374368,
             1.4142135623752818)
        ]

        expected_brd = [
            ((0.0, mp.Vector3(0.0, 0.0, 0.0)),
             (0.7071067811865476, mp.Vector3(0.5, 0.5, 0.0))),
            ((0.5000000000350678, mp.Vector3(0.5, 0.0, 0.0)),
             (1.0000000000464613, mp.Vector3(0.0, 0.0, 0.0))),
            ((0.7071067811884221, mp.Vector3(0.5, 0.5, 0.0)),
             (1.1180339887555244, mp.Vector3(0.5, 0.0, 0.0))),
            ((0.7071067811901163, mp.Vector3(0.5, 0.5, 0.0)),
             (1.1313708499266775, mp.Vector3(0.2, 0.2, 0.0))),
            ((1.000000000001028, mp.Vector3(0.0, 0.0, 0.0)),
             (1.5811388300846416, mp.Vector3(0.5, 0.5, 0.0))),
            ((1.1180339887687103, mp.Vector3(0.5, 0.0, 0.0)),
             (1.5811388300858549, mp.Vector3(0.5, 0.5, 0.0))),
            ((1.2806248475163993, mp.Vector3(0.2000000000000004, 0.0, 0.0)),
             (1.5811388300892486, mp.Vector3(0.5, 0.5, 0.0))),
            ((1.4142135623752818, mp.Vector3(0.0, 0.0, 0.0)),
             (1.8027756376524453, mp.Vector3(0.5, 0.0, 0.0))),

        ]

        for exp, res in zip(expected_brd, ms.band_range_data):
            # Compare min freqs
            self.assertAlmostEqual(exp[0][0], res[0][0])
            # Compare min k
            self.assertTrue(exp[0][1].close(res[0][1]))
            # Compare max freqs
            self.assertAlmostEqual(exp[1][0], res[1][0])
            # Compare max k
            self.assertTrue(exp[1][1].close(res[1][1]))

        for res, exp in zip(ms.all_freqs, expected_freqs):
            for r, e in zip(res, exp):
                self.assertAlmostEqual(r, e)

        gaps = ms.output_gaps(ms.band_range_data)
        self.assertEqual(len(gaps), 0)

if __name__ == '__main__':
    unittest.main()
